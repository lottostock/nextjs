"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const firestore_rule_test_1 = require("./firestore_rule_test");
const index_1 = require("../index");
const should = require("should");
describe('Emulator', function () {
    this.timeout(2 * 60 * 1000);
    it('should start and stop the emulator', () => __awaiter(this, void 0, void 0, function* () {
        yield firestore_rule_test_1.FirestoreRuleTest.start();
        const tc = new firestore_rule_test_1.FirestoreRuleTest('userId');
        yield tc.firestore.doc(index_1.getFirestoreTestPath()).set({
            test: 123123
        });
        const data = yield tc.firestore.doc(index_1.getFirestoreTestPath()).get();
        should(data.data()).property('test', 123123);
        yield firestore_rule_test_1.FirestoreRuleTest.stop();
    }));
});
//# sourceMappingURL=emulator_test.js.map