"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirestoreRuleTest = void 0;
const firebase = require("@firebase/testing");
const fs = require("fs");
const FirestoreEmulator = require("firebase-tools/lib/emulator/firestoreEmulator");
class FirestoreRuleTest {
    constructor(auth, config) {
        this.projectId = 'firestore-test-' + Date.now();
        if (typeof auth === 'string') {
            this.auth = {
                uid: auth
            };
        }
        else {
            this.auth = auth;
        }
        if (config === null || config === void 0 ? void 0 : config.projectId) {
            this.projectId = config.projectId;
        }
        this.firestore = firebase
            .initializeTestApp({
            projectId: this.projectId,
            auth: this.auth
        })
            .firestore();
        this.admin = firebase
            .initializeAdminApp({
            projectId: this.projectId
        }).firestore();
    }
    loadRules(pathToRules) {
        return __awaiter(this, void 0, void 0, function* () {
            const rules = fs.readFileSync(pathToRules, 'utf8');
            yield firebase.loadFirestoreRules({ projectId: this.projectId, rules });
        });
    }
    clearFirestoreData() {
        return firebase.clearFirestoreData({
            projectId: this.projectId
        });
    }
    static deleteApps() {
        return Promise.all(firebase.apps().map(app => app.delete()));
    }
    static start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield FirestoreRuleTest.EMULATOR.start();
            console.log('Starting local Firestore Emulator', FirestoreRuleTest.EMULATOR.getInfo());
            yield FirestoreRuleTest.wait(3000);
        });
    }
    static stop() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield FirestoreRuleTest.EMULATOR.stop();
            }
            catch (ignored) { }
            yield FirestoreRuleTest.wait(1000);
            console.log('Stopped local Firestore Emulator');
            yield this.deleteApps();
        });
    }
    static wait(ms) {
        return new Promise((resolve) => {
            setTimeout(resolve, ms);
        });
    }
}
exports.FirestoreRuleTest = FirestoreRuleTest;
FirestoreRuleTest.EMULATOR = new FirestoreEmulator.FirestoreEmulator({
    auto_download: true
});
//# sourceMappingURL=firestore_rule_test.js.map