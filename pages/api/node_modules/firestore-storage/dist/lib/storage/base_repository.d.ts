import 'reflect-metadata';
import { BaseModel, IErrorFactory, IFirestoreTransaction, IStorageDriver, ModelQuery, PatchUpdate, PathFunction, QueryBuilder, ReadModel, StreamOptions } from "firestore-storage-core";
export declare abstract class BaseRepository<T extends BaseModel> {
    protected storage: IStorageDriver;
    protected errorFactory: IErrorFactory;
    constructor(storage: IStorageDriver, errorFactory: IErrorFactory);
    abstract getCollectionPath(...documentIds: string[]): string | PathFunction;
    findById(...ids: string[]): Promise<ReadModel<T> | null>;
    find(attributes: ModelQuery<T>, ...ids: string[]): Promise<ReadModel<T> | null>;
    get(attributes: ModelQuery<T>, ...ids: string[]): Promise<ReadModel<T>>;
    getById(...ids: string[]): Promise<ReadModel<T>>;
    list(attributes?: ModelQuery<T> | null, ...ids: string[]): Promise<ReadModel<T>[]>;
    protected mapToWhereClause(query: QueryBuilder<T>, attributes?: ModelQuery<T>): QueryBuilder<T>;
    query(cb: (qb: QueryBuilder<T>) => QueryBuilder<T>, ...ids: string[]): Promise<ReadModel<T>[]>;
    groupQuery(cb?: (qb: QueryBuilder<T>) => QueryBuilder<T>): Promise<ReadModel<T>[]>;
    private getCollectionId;
    stream(cb?: (qb: QueryBuilder<T>) => QueryBuilder<T>, ...ids: string[]): any;
    stream(cb?: (qb: QueryBuilder<T>) => QueryBuilder<T>, options?: StreamOptions, ...ids: string[]): any;
    /**@deprecated Has been replaced with findAll() */
    batchGet(documentIds: string[], ...ids: string[]): Promise<(ReadModel<T> | null)[]>;
    /**@deprecated Will be removed in the future.*/
    batchGetNoNulls(documentIds: string[], ...ids: string[]): Promise<ReadModel<T>[]>;
    findAll(documentIds: string[], ...ids: string[]): Promise<(ReadModel<T> | null)[]>;
    getAll(documentIds: string[], ...ids: string[]): Promise<ReadModel<T>[]>;
    save(data: T | PatchUpdate<T>, ...ids: string[]): Promise<ReadModel<T>>;
    write(data: T | PatchUpdate<T>, ...ids: string[]): Promise<ReadModel<T>>;
    clear(...ids: string[]): Promise<void>;
    delete(...ids: string[]): Promise<void>;
    transaction<R>(updateFunction: RepositoryTransactionCallback<T, R>, ...ids: string[]): Promise<R>;
    generateId(): string;
    private getStringCollectionPath;
    private createError;
}
export declare type RepositoryTransactionCallback<T, R> = (transaction: RepositoryTransaction<T>) => Promise<R>;
export declare class RepositoryTransaction<T> {
    private collectionPath;
    private trx;
    constructor(collectionPath: string, trx: IFirestoreTransaction);
    create(data: T): IFirestoreTransaction;
    delete(docId: string): IFirestoreTransaction;
    get(docId: string): Promise<T>;
    query(cb: (qb: QueryBuilder<T>) => QueryBuilder<T>): Promise<T[]>;
    set(data: T): IFirestoreTransaction;
    setAvoidMerge(data: T): IFirestoreTransaction;
    update(data: T): IFirestoreTransaction;
}
//# sourceMappingURL=base_repository.d.ts.map