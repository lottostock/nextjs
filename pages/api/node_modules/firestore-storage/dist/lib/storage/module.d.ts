import { ContainerModule } from 'inversify';
import * as admin from 'firebase-admin';
import { IErrorFactory } from 'firestore-storage-core';
import { DynamicModule, FactoryProvider, ModuleMetadata, Type } from "@nestjs/common";
export declare class FirestoreStorageNestModule {
    static forRootAsync(options: FirestoreModuleAsyncOptions, errorFactory?: IErrorFactory): DynamicModule;
    private static createConnectProviders;
    private static createConnectOptionsProvider;
    static withMemoryStorage(errorFactory?: IErrorFactory): DynamicModule;
    static withFirestore(firestore: admin.firestore.Firestore, errorFactory?: IErrorFactory): DynamicModule;
    private static with;
}
export interface FirestoreFactory {
    createFirestoreInstance(): Promise<admin.firestore.Firestore> | admin.firestore.Firestore;
}
export interface FirestoreModuleAsyncOptions extends Pick<ModuleMetadata, 'imports'> {
    /**
     * Existing Provider to be used.
     */
    useExisting?: Type<FirestoreFactory>;
    /**
     * Type (class name) of provider (instance to be registered and injected).
     */
    useClass?: Type<FirestoreFactory>;
    /**
     * Factory function that returns an instance of the provider to be injected.
     */
    useFactory?: (...args: any[]) => Promise<admin.firestore.Firestore> | admin.firestore.Firestore;
    /**
     * Optional list of providers to be injected into the context of the Factory function.
     */
    inject?: FactoryProvider['inject'];
}
export declare class FirestoreStorageModule {
    module: ContainerModule;
    constructor(instance: admin.firestore.Firestore, defaultStorageDriver: any, errorFactory?: IErrorFactory);
    static createWithMemoryStorage(errorFactory?: IErrorFactory): ContainerModule;
    static createWithFirestore(instance: admin.firestore.Firestore, errorFactory?: IErrorFactory): ContainerModule;
}
//# sourceMappingURL=module.d.ts.map