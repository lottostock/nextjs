"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportFirestore = void 0;
const firestore = require("@google-cloud/firestore");
const path = require("path");
function exportFirestore(projectId, bucketName, dir, collectionIds) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = new firestore.v1.FirestoreAdminClient();
        const databaseName = client.databasePath(projectId, '(default)');
        return client.exportDocuments({
            name: databaseName,
            outputUriPrefix: `gs://${path.join(bucketName, dir)}`,
            // Leave collectionIds empty to export all collections
            // or set to a list of collection IDs to export,
            // collectionIds: ['users', 'posts']
            collectionIds: collectionIds || []
        })
            .then(responses => {
            const response = responses[0];
            console.log(`Operation Name: ${response['name']}`);
        })
            .catch(err => {
            console.error(err);
            throw new Error('Export operation failed');
        });
    });
}
exports.exportFirestore = exportFirestore;
//# sourceMappingURL=export.js.map