/// <reference types="node" />
import * as admin from 'firebase-admin';
import { IStorageDriver, QueryBuilder, SaveOptions, IFirestoreTransaction, IDocument } from "firestore-storage-core";
import { EventEmitter } from "events";
export declare enum StorageEventType {
    Read = "read",
    Write = "write",
    Delete = "delete"
}
export interface StorageEvent {
    type: StorageEventType;
    collection: string;
    count: number;
}
export interface FirestoreStorageExportOptions {
    parallelCollections?: number;
    parallelDocuments?: number;
    tries?: number;
}
export declare class FirestoreStorage extends EventEmitter implements IStorageDriver {
    protected firestore: admin.firestore.Firestore;
    private static readonly EXPORT_OPTIONS;
    constructor(firestore: admin.firestore.Firestore);
    static clone(data: any): {
        id: string;
        data: any;
    };
    static format(snapshot: FirebaseFirestore.DocumentSnapshot): any;
    private static getPath;
    findById(collection: string, id: string): Promise<any>;
    find<T>(collection: string, cb: (qb: QueryBuilder<T>) => QueryBuilder<T>): Promise<any>;
    save<T>(collection: string, data: any, options?: SaveOptions): Promise<T>;
    update(collection: string, data: any, options?: SaveOptions): Promise<any>;
    query<T>(collection: string, cb?: (qb: QueryBuilder<T>) => QueryBuilder<T>): Promise<any[]>;
    groupQuery<T>(collectionId: string, cb?: (qb: QueryBuilder<T>) => QueryBuilder<T>): Promise<any[]>;
    private executeQuery;
    stream<T>(collection: string, cb?: (qb: QueryBuilder<T>) => QueryBuilder<T>, options?: {
        size: number;
    }): NodeJS.ReadableStream;
    batchGet(collection: string, ids: string[]): Promise<any>;
    transaction<T>(updateFunction: (firestoreTrx: IFirestoreTransaction) => Promise<T>, transactionOptions?: {
        maxAttempts?: number;
    }): Promise<T>;
    delete(collection: string, id: string): Promise<void>;
    clear(collection: string): Promise<unknown>;
    generateId(): string;
    export(rootDoc?: string, options?: FirestoreStorageExportOptions, collectionNames?: string[]): Promise<IDocument>;
    import(data: IDocument): Promise<void>;
    private importDocument;
    private importCollection;
    private exportDocument;
    private add;
    private deleteCollection;
    private deleteQueryBatch;
    private emitRead;
    private emitWrite;
}
export declare class FirestoreTransaction implements IFirestoreTransaction {
    private firestore;
    private transaction;
    constructor(firestore: admin.firestore.Firestore, transaction: FirebaseFirestore.Transaction);
    query<T>(collectionPath: string, cb: (qb: QueryBuilder<T>) => QueryBuilder<T>): Promise<T[]>;
    get<T>(collectionPath: string, docId: string): Promise<T>;
    create<T>(collectionPath: string, data: T): FirestoreTransaction;
    set<T>(collectionPath: string, data: T): FirestoreTransaction;
    setAvoidMerge<T>(collectionPath: string, data: T): FirestoreTransaction;
    update<T>(collectionPath: string, data: T): FirestoreTransaction;
    delete(collectionPath: string, docId: string): FirestoreTransaction;
}
//# sourceMappingURL=firestore_storage.d.ts.map