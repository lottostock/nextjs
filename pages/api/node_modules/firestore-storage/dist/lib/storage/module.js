"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirestoreStorageModule = exports.FirestoreStorageNestModule = void 0;
const base_repository_1 = require("./base_repository");
const inversify_1 = require("inversify");
const firestore_storage_1 = require("./firestore_storage");
const firestore_storage_core_1 = require("firestore-storage-core");
const common_1 = require("@nestjs/common");
Reflect.decorate([common_1.Injectable()], firestore_storage_core_1.MemoryStorage);
function getProviders(storage, firestore, errorFactory) {
    return [
        firestore_storage_1.FirestoreStorage,
        firestore_storage_core_1.MemoryStorage,
        {
            provide: firestore_storage_core_1.StorageDriver,
            useExisting: storage,
        },
        {
            provide: firestore_storage_core_1.ErrorFactory,
            useValue: errorFactory || ((message) => {
                return new Error(message);
            })
        },
        {
            provide: firestore_storage_core_1.FirestoreInstance,
            useValue: firestore
        }
    ];
}
class FirestoreStorageNestModule {
    static forRootAsync(options, errorFactory) {
        return {
            imports: options.imports || [],
            module: FirestoreStorageNestModule,
            providers: [
                firestore_storage_1.FirestoreStorage,
                firestore_storage_core_1.MemoryStorage,
                {
                    provide: firestore_storage_core_1.StorageDriver,
                    useExisting: firestore_storage_1.FirestoreStorage,
                },
                {
                    provide: firestore_storage_core_1.ErrorFactory,
                    useValue: errorFactory || ((message) => {
                        return new Error(message);
                    })
                },
                ...this.createConnectProviders(options)
            ],
            exports: [
                firestore_storage_1.FirestoreStorage,
                firestore_storage_core_1.MemoryStorage,
                {
                    provide: firestore_storage_core_1.StorageDriver,
                    useExisting: firestore_storage_core_1.StorageDriver
                },
                {
                    provide: firestore_storage_core_1.ErrorFactory,
                    useExisting: firestore_storage_core_1.ErrorFactory
                }
            ],
        };
    }
    static createConnectProviders(options) {
        if (options.useExisting || options.useFactory) {
            return [this.createConnectOptionsProvider(options)];
        }
        // for useClass
        return [
            this.createConnectOptionsProvider(options),
            {
                provide: options.useClass,
                useClass: options.useClass,
            },
        ];
    }
    static createConnectOptionsProvider(options) {
        if (options.useFactory) {
            // for useFactory
            return {
                provide: firestore_storage_core_1.FirestoreInstance,
                useFactory: options.useFactory,
                inject: options.inject || [],
            };
        }
        // For useExisting...
        return {
            provide: firestore_storage_core_1.FirestoreInstance,
            useFactory: (factory) => __awaiter(this, void 0, void 0, function* () { return yield factory.createFirestoreInstance(); }),
            inject: [options.useExisting || options.useClass],
        };
    }
    static withMemoryStorage(errorFactory) {
        return this.with(firestore_storage_core_1.MemoryStorage, null, errorFactory);
    }
    static withFirestore(firestore, errorFactory) {
        return this.with(firestore_storage_1.FirestoreStorage, firestore, errorFactory);
    }
    static with(storage, firestore, errorFactory) {
        const providers = getProviders(storage, firestore, errorFactory);
        return {
            module: FirestoreStorageModule,
            providers: providers,
            exports: providers
        };
    }
}
exports.FirestoreStorageNestModule = FirestoreStorageNestModule;
class FirestoreStorageModule {
    constructor(instance, defaultStorageDriver, errorFactory) {
        this.module = new inversify_1.ContainerModule((bind) => {
            bind(base_repository_1.BaseRepository).toSelf().inSingletonScope();
            bind(firestore_storage_1.FirestoreStorage).toSelf().inSingletonScope();
            bind(firestore_storage_core_1.MemoryStorage).toSelf().inSingletonScope();
            bind(firestore_storage_core_1.FirestoreInstance).toConstantValue(instance);
            bind(firestore_storage_core_1.StorageDriver).to(defaultStorageDriver).inSingletonScope();
            bind(firestore_storage_core_1.ErrorFactory).toFactory(() => {
                if (errorFactory) {
                    return errorFactory;
                }
                return;
            });
        });
    }
    static createWithMemoryStorage(errorFactory) {
        let md = new FirestoreStorageModule(null, firestore_storage_core_1.MemoryStorage, errorFactory);
        return md.module;
    }
    static createWithFirestore(instance, errorFactory) {
        let md = new FirestoreStorageModule(instance, firestore_storage_1.FirestoreStorage, errorFactory);
        return md.module;
    }
}
exports.FirestoreStorageModule = FirestoreStorageModule;
//# sourceMappingURL=module.js.map