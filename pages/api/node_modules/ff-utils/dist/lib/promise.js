"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Processes a batch of items in parallel using a handler function to generate the promises. It starts by initializing
 * the amount of Promises given by the batchSize parameter. Once a Promise finishes it immediately starts the next one.
 * The function returns the results in an array in the order in which the promises finished.
 *
 * The optional onUpdate function is called every time a new Promises starts or is finished
 */
function processPromisesParallel(items, batchSize, handler, onUpdate) {
    return __awaiter(this, void 0, void 0, function* () {
        items = [...items];
        const all = [];
        const total = items.length;
        let done = 0;
        let running = 0;
        function update() {
            if (onUpdate)
                onUpdate({
                    running,
                    done,
                    total: total,
                    queued: total - (done + running)
                });
        }
        function executeNext() {
            return __awaiter(this, void 0, void 0, function* () {
                const item = items.shift();
                if (!item) {
                    return;
                }
                running++;
                update();
                const result = yield handler(item);
                all.push(result);
                running--;
                done++;
                update();
                if (items.length > 0) {
                    yield executeNext();
                }
            });
        }
        const promises = [];
        for (let i = 0; i < batchSize; i++) {
            promises.push(executeNext());
        }
        yield Promise.all(promises);
        return all;
    });
}
exports.processPromisesParallel = processPromisesParallel;
function processPromisesParallelWithRetries(items, batchSize, tries, handler, onUpdate) {
    return __awaiter(this, void 0, void 0, function* () {
        return processPromisesParallel(items, batchSize, (item) => __awaiter(this, void 0, void 0, function* () {
            let error = null;
            for (let run = 0; run < tries; run++) {
                try {
                    return yield handler(item);
                }
                catch (err) {
                    if (run < tries - 1) {
                        console.error(err);
                    }
                    error = err;
                }
            }
            throw error;
        }), onUpdate);
    });
}
exports.processPromisesParallelWithRetries = processPromisesParallelWithRetries;
function promiseProps(obj) {
    return __awaiter(this, void 0, void 0, function* () {
        const promises = [];
        const keys = Object.keys(obj);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            promises.push(obj[key]);
        }
        const results = yield Promise.all(promises);
        return results.reduce((map, current, index) => {
            map[keys[index]] = current;
            return map;
        }, {});
    });
}
exports.promiseProps = promiseProps;
//# sourceMappingURL=promise.js.map