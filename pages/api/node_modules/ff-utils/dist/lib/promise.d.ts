/**
 * Processes a batch of items in parallel using a handler function to generate the promises. It starts by initializing
 * the amount of Promises given by the batchSize parameter. Once a Promise finishes it immediately starts the next one.
 * The function returns the results in an array in the order in which the promises finished.
 *
 * The optional onUpdate function is called every time a new Promises starts or is finished
 */
export declare function processPromisesParallel<T, K>(items: T[], batchSize: number, handler: (item: T) => Promise<K>, onUpdate?: (status: {
    running: number;
    done: number;
    total: number;
    queued: number;
}) => void): Promise<K[]>;
export declare function processPromisesParallelWithRetries<T, K>(items: T[], batchSize: number, tries: number, handler: (item: T) => Promise<K>, onUpdate?: (status: {
    running: number;
    done: number;
    total: number;
    queued: number;
}) => void): Promise<K[]>;
export declare function promiseProps<T>(obj: {
    [K in keyof T]: Promise<T[K]> | T[K];
}): Promise<T>;
