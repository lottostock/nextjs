export interface BaseModel {
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    _rawPath?: string;
}
export declare type ReadModel<T extends BaseModel> = T & Required<BaseModel>;
export declare type ModelQuery<T extends BaseModel> = Partial<Omit<T, keyof BaseModel>>;
export interface ReferenceMap {
    [id: string]: boolean;
}
export declare function toReferenceMap(...entities: BaseModel[]): ReferenceMap;
export declare function toReferenceMapFromIds(ids: string[], value?: any): ReferenceMap;
export declare function isSameReferenceMap(r1: ReferenceMap, r2: ReferenceMap): boolean;
declare type NestedPartial<T> = {
    [K in keyof T]?: T[K] extends Array<infer R> ? Array<NestedPartial<R>> : NestedPartial<T[K]>;
};
export declare type PatchUpdate<T> = {
    id: string;
} & NestedPartial<T>;
/**
 * This is a copy of the current Timestamp implementation from Firestore Admin to be used for typings
 */
export interface Timestamp {
    constructor(seconds: number, nanoseconds: number): any;
    readonly seconds: number;
    readonly nanoseconds: number;
    toDate(): Date;
    toMillis(): number;
    isEqual(other: Timestamp): boolean;
}
export {};
//# sourceMappingURL=base_model.d.ts.map