"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migrations = void 0;
const inversify_1 = require("inversify");
const storage_1 = require("./storage");
let Migrations = class Migrations {
    constructor(storage) {
        this.storage = storage;
    }
    upgrade() {
        return __awaiter(this, void 0, void 0, function* () {
            let version = yield this.readVersion();
            const targetVersion = this.getVersion();
            console.log(`Current database version (${version}). Target version (${targetVersion})`);
            while (version < targetVersion) {
                console.log(`Upgrading from ${version} to ${version + 1}`);
                version++;
                const label = `Successfully upgraded to ${version}`;
                console.time(label);
                yield this.onUpgrade(version);
                yield this.writeVersion(version);
                console.timeEnd(label);
            }
        });
    }
    readVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            const parts = this.getVersionDocumentPathParts();
            const snapshot = yield this.storage.findById(parts.collection, parts.document);
            if (snapshot) {
                return snapshot.version || 0;
            }
            return 0;
        });
    }
    writeVersion(version) {
        return __awaiter(this, void 0, void 0, function* () {
            const parts = this.getVersionDocumentPathParts();
            yield this.storage.save(parts.collection, {
                id: parts.document,
                version: version
            });
        });
    }
    // noinspection JSMethodCanBeStatic
    getVersionDocumentPath() {
        return 'version/current';
    }
    getVersionDocumentPathParts() {
        const path = this.getVersionDocumentPath();
        const parts = path.split('/');
        if (parts.length !== 2) {
            throw new Error('Invalid version document path. Use format collection/docId. For example version/current');
        }
        return {
            collection: parts[0],
            document: parts[1]
        };
    }
};
Migrations = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(storage_1.StorageDriver)),
    __metadata("design:paramtypes", [Object])
], Migrations);
exports.Migrations = Migrations;
//# sourceMappingURL=migrations.js.map